diff --git a/node_modules/@react-three/drei/core/SpotLight.js b/node_modules/@react-three/drei/core/SpotLight.js
index d11b473..476d7c5 100644
--- a/node_modules/@react-three/drei/core/SpotLight.js
+++ b/node_modules/@react-three/drei/core/SpotLight.js
@@ -17,6 +17,7 @@ const SpotLight = /*#__PURE__*/React.forwardRef(({
   anglePower = 5,
   ...props
 }, ref) => {
+  const { ref1, ref2 } = ref;
   const mesh = React.useRef(null);
   const size = useThree(state => state.size);
   const camera = useThree(state => state.camera);
@@ -27,6 +28,7 @@ const SpotLight = /*#__PURE__*/React.forwardRef(({
   useFrame(() => {
     material.uniforms.spotPosition.value.copy(mesh.current.getWorldPosition(vec));
     mesh.current.lookAt(mesh.current.parent.target.getWorldPosition(vec));
+    material.uniforms.opacity.value = ref2.current;
   });
   const geom = React.useMemo(() => {
     const geometry = new CylinderGeometry(radiusTop, radiusBottom, distance, 128, 64, true);
@@ -35,7 +37,7 @@ const SpotLight = /*#__PURE__*/React.forwardRef(({
     return geometry;
   }, [angle, distance, radiusTop, radiusBottom]);
   return /*#__PURE__*/React.createElement("spotLight", _extends({
-    ref: ref,
+    ref: ref1,
     angle: angle,
     color: color,
     distance: distance
diff --git a/node_modules/@react-three/drei/web/ScrollControls.js b/node_modules/@react-three/drei/web/ScrollControls.js
index dc7d257..a6a626f 100644
--- a/node_modules/@react-three/drei/web/ScrollControls.js
+++ b/node_modules/@react-three/drei/web/ScrollControls.js
@@ -69,6 +69,7 @@ function ScrollControls({
     return state;
   }, [eps, damping, horizontal, pages]);
   React.useEffect(() => {
+    el.id = 'scroll-controller';
     el.style.position = 'absolute';
     el.style.width = '100%';
     el.style.height = '100%';
@@ -98,15 +99,15 @@ function ScrollControls({
     const oldTarget = events.connected || gl.domElement;
     requestAnimationFrame(() => events.connect == null ? void 0 : events.connect(el));
     const oldCompute = get().events.compute;
-    setEvents({
-      compute(event, state) {
-        const offsetX = event.clientX - target.offsetLeft;
-        const offsetY = event.clientY - target.offsetTop;
-        state.pointer.set(offsetX / state.size.width * 2 - 1, -(offsetY / state.size.height) * 2 + 1);
-        state.raycaster.setFromCamera(state.pointer, state.camera);
-      }
-
-    });
+    // setEvents({
+    //   compute(event, state) {
+    //     const offsetX = event.clientX - target.offsetLeft;
+    //     const offsetY = event.clientY - target.offsetTop;
+    //     state.pointer.set(offsetX / state.size.width * 2 - 1, -(offsetY / state.size.height) * 2 + 1);
+    //     state.raycaster.setFromCamera(state.pointer, state.camera);
+    //   }
+
+    // });
     return () => {
       target.removeChild(el);
       setEvents({
